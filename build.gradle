buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.spacialcircumstances:gradle-cucumber-reporting:0.1.23"
    }
}

plugins {
    id 'war'
    id 'org.gretty' version '4.0.3' // Updated Gretty version
    id "org.flywaydb.flyway" version "6.0.8"
    id "org.sonarqube" version "3.0"
    id 'jacoco'
    id "com.dorongold.task-tree" version "1.4"
    id 'info.solidsoft.pitest' version '1.5.1'
    id "org.owasp.dependencycheck" version "6.1.6"
    id 'org.hidetake.ssh' version '2.10.1'
    id "org.checkerframework" version "0.5.0"
    id "java-library"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11)) // Ensuring Java 11 compatibility
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal() // Ensures correct plugin resolution
    maven { url 'https://jitpack.io' } // Added for Gretty and other plugins
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    implementation 'me.gosimple:nbvcxz:1.4.3'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.13'
    testImplementation 'io.cucumber:cucumber-java:5.7.0'
    testImplementation 'io.cucumber:cucumber-junit:5.7.0'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.2'
    implementation 'com.h2database:h2:1.4.200'
    implementation "org.flywaydb:flyway-core:6.4.1"
    implementation 'net.bull.javamelody:javamelody-core:1.85.0'
}

gretty {
    httpPort = 8080
    servletContainer = 'tomcat10'
    contextPath = "demo"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

pitest {
    targetClasses = ['com.coveros.training.authentication.*', 'com.coveros.training.library.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        html.destination file("${buildDir}/reports/jacoco")
    }
}

check.dependsOn(jacocoTestReport)

sonarqube {
    properties {
        property "sonar.projectKey", "demo"
        property "sonar.projectName", "Demo Application"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test/"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml"
    }
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    failFast = true
}
